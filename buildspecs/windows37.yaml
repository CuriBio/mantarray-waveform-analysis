version: 0.2 # this is the version for the buildspec parser, not the file version

env:
  git-credential-helper: yes

  parameter-store:
    TWINE_USERNAME: /CodeBuild/general/pypi_username
    TWINE_PASSWORD: /CodeBuild/general/pypi_password

phases:
  install:
    runtime-versions:
      python: 3.7
    commands:
      - python --version
      - echo "Git Branch information:"
      - git branch -av
      - echo "THERE IS NO WAY FIGURED OUT YET IN WINDOWS TO CONFIRM THAT THE GIT COMMIT IS THE MASTER BRANCH"
      #- SHA_OF_REMOTE_MASTER=$(git branch -av | grep remotes/origin/master | grep -oP "master\s+\K\w+")
      # In CodeBuild, sometimes a direct SHA is grabbed rather than a branch, so the 'name' of the branch is listed as: (no branch)
      #   So can't use traditional grep to just check that the name of the current branch is 'master', have to explicitly check the SHAs
      #- SHA_OF_LOCAL_COMMIT=$(git branch -av | grep "*" | grep -oP " \s+\K\w+")
      - git checkout master
      - echo "Creating virtual environment for Python"
      - python -m venv venv
      - echo "Entering virtual environment"
      - venv\Scripts\Activate.ps1 # powershell command, creates an in-memory function 'deactivate' that is available
      - echo "Ensure environment is empty"
      - pip freeze
      - echo "Upgrading pip"
      - pip install pip==20.2.2 --upgrade
      - echo "Installing development/testing packages"
      - pip install -r requirements-dev.txt --upgrade
      - pip install -r docs/requirements.txt --upgrade
      - echo "Installing main package"
      - pip install -e . --upgrade
      - echo "Listing all installed packages"
      - pip freeze
      - pre-commit install

  pre_build:
    commands:
      - echo "Running pre-commit hooks on all the files"
      - $env:SKIP = 'git-dirty,python-safety-dependencies-check'; pre-commit run -a
      - prerelease --no-input
      - echo "Building Sphinx documentation"
      - make --directory=docs html

  build:
    commands:
      - echo "Build started on $(date)"
      - echo "Running test suite"
      - if ([int]$(Get-Variable PYTEST_RANDOMLY_SEED -valueOnly) -eq 0) { pytest -xsvv --full-ci --include-slow-tests } else { pytest -xsvv --full-ci --include-slow-tests --randomly-seed=$(Get-Variable PYTEST_RANDOMLY_SEED -valueOnly)}
      # Only run the following command if the PUBLISH_TO_PYPI environmental variable is set (i.e. =1) https://stackoverflow.com/questions/39619956/short-way-to-run-command-if-variable-is-set  (extra outer parentheses needed to make YAML parser happy)
      - if ([int]$(Get-Variable PUBLISH_TO_PYPI -valueOnly)) { echo 'Publishing to PyPI';  echo "Creating wheel"; python setup.py bdist_wheel; echo "Uploading wheel"; twine upload dist/* } else { echo 'Just a dry run, not publishing to PyPi.'}
      - echo "Build completed on $(date)"